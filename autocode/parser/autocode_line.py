from ast import *


# Begin -- grammar generated by Yapps
import sys, re
from yapps import runtime

class AutocodeLineParserScanner(runtime.Scanner):
    patterns = [
        ("'v'", re.compile('v')),
        ("','", re.compile(',')),
        ('\\s', re.compile('\\s')),
        ('EOL', re.compile('$')),
        ('INDEX', re.compile('n[0-9][0-9]?')),
        ('mod', re.compile('MOD')),
        ('function', re.compile('MOD|INT|FRAC|SQRT|SIN|COS|TAN|CSC|SEC|COT|ARCSIN|ARCCOS|ARCTAN|LOG|EXPM|EXP')),
        ('special_printing', re.compile('XP|X|SP|S')),
        ('prt', re.compile('PRINT')),
        ('tapes', re.compile('TAPE[B]?')),
        ('tape', re.compile('TAPE')),
        ('spec', re.compile('[0-9]{4}')),
        ('label', re.compile('[1-9][0-9]?\\)')),
        ('negate', re.compile('-')),
        ('div', re.compile('/')),
        ('op', re.compile('\\+|-|x|/')),
        ('plus', re.compile('\\+')),
        ('float', re.compile('[0-9]*\\.[0-9]*')),
        ('INT', re.compile('[0-9]{1,4}')),
        ('gets', re.compile('=')),
        ('star', re.compile('\\*')),
        ('lparen', re.compile('\\(')),
        ('rparen', re.compile('\\)')),
        ('goto', re.compile('\\^')),
        ('stop', re.compile('STOP')),
        ('compare', re.compile('>=|>|\\=\\*|\\=|=\\*|=')),
    ]
    def __init__(self, str,*args,**kw):
        runtime.Scanner.__init__(self,None,{'\\s':None,},str,*args,**kw)

class AutocodeLineParser(runtime.Parser):
    Context = runtime.Context
    def line(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'line', [])
        if self._peek('lparen', 'special_printing', 'label', 'stop', 'prt', 'tape', 'goto', "'v'", 'INDEX', context=_context) == 'lparen':
            lparen = self._scan('lparen', context=_context)
        if self._peek('special_printing', 'label', 'stop', 'prt', 'tape', 'goto', "'v'", 'INDEX', context=_context) == 'special_printing':
            special_printing = self._scan('special_printing', context=_context)
        _token = self._peek('label', 'stop', 'prt', 'tape', 'goto', "'v'", 'INDEX', context=_context)
        if _token == 'label':
            label = self._scan('label', context=_context)
            statement = self.statement(_context)
        else: # in ['stop', 'prt', 'tape', 'goto', "'v'", 'INDEX']
            statement = self.statement(_context)
        if self._peek('rparen', 'EOL', context=_context) == 'rparen':
            rparen = self._scan('rparen', context=_context)
        EOL = self._scan('EOL', context=_context)
        return 'OK'

    def statement(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'statement', [])
        _token = self._peek('stop', 'prt', 'tape', 'goto', "'v'", 'INDEX', context=_context)
        if _token in ["'v'", 'INDEX']:
            assignment = self.assignment(_context)
        elif _token == 'prt':
            print_statement = self.print_statement(_context)
        elif _token == 'tape':
            tape_statement = self.tape_statement(_context)
        elif _token == 'stop':
            stop = self._scan('stop', context=_context)
        else: # == 'goto'
            jump = self.jump(_context)

    def print_statement(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'print_statement', [])
        prt = self._scan('prt', context=_context)
        _token = self._peek('INDEX', "'v'", context=_context)
        if _token == 'INDEX':
            index = self.index(_context)
        else: # == "'v'"
            variable = self.variable(_context)
        self._scan("','", context=_context)
        _token = self._peek('spec', 'INDEX', context=_context)
        if _token == 'spec':
            spec = self._scan('spec', context=_context)
        else: # == 'INDEX'
            index = self.index(_context)

    def tape_statement(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'tape_statement', [])
        tape = self._scan('tape', context=_context)
        return ReadProgramTape()

    def assignment(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'assignment', [])
        _token = self._peek("'v'", 'INDEX', context=_context)
        if _token == 'INDEX':
            index_assignment = self.index_assignment(_context)
        else: # == "'v'"
            var_assignment = self.var_assignment(_context)

    def variable(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'variable', [])
        self._scan("'v'", context=_context)
        variable_selector = self.variable_selector(_context)

    def variable_selector(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'variable_selector', [])
        _token = self._peek('INT', 'INDEX', 'lparen', context=_context)
        if _token == 'INT':
            integer = self.integer(_context)
            return integer
        elif _token == 'INDEX':
            index = self.index(_context)
            return index
        else: # == 'lparen'
            modifier = self.modifier(_context)
            return modifier

    def modifier(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'modifier', [])
        neg = False
        lparen = self._scan('lparen', context=_context)
        if self._peek('negate', 'INT', context=_context) == 'negate':
            negate = self._scan('negate', context=_context)
            neg = True
        integer = self.integer(_context)
        plus = self._scan('plus', context=_context)
        index = self.index(_context)
        rparen = self._scan('rparen', context=_context)
        return Modifier(integer if not neg else Negated(integer), index)

    def index_assignment(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'index_assignment', [])
        index = self.index(_context)
        gets = self._scan('gets', context=_context)
        _token = self._peek('tapes', 'negate', 'INDEX', 'mod', "'v'", 'INT', context=_context)
        if _token == 'tapes':
            tape_spec = self.tape_spec(_context)
            return MultipleIndexAssignment(index, tape_spec)
        else: # in ['negate', 'INDEX', 'mod', "'v'", 'INT']
            int_expression = self.int_expression(_context)
            return IndexAssignment(index, int_expression)

    def var_assignment(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'var_assignment', [])
        variable = self.variable(_context)
        gets = self._scan('gets', context=_context)
        _token = self._peek('tapes', "'v'", 'negate', 'float', 'function', 'INDEX', 'INT', context=_context)
        if _token == 'tapes':
            tape_spec = self.tape_spec(_context)
        else: # in ["'v'", 'negate', 'float', 'function', 'INDEX', 'INT']
            var_expression = self.var_expression(_context)

    def tape_spec(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'tape_spec', [])
        qualifier = ''
        tapes = self._scan('tapes', context=_context)
        if self._peek('star', 'INDEX', 'div', 'plus', 'gets', 'compare', "','", 'op', 'rparen', 'EOL', context=_context) in ['star', 'INDEX']:
            tape_qualifier = self.tape_qualifier(_context)
            qualifier = tape_qualifier
        return ReadDataTape(qualifier, tapes)

    def tape_qualifier(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'tape_qualifier', [])
        _token = self._peek('star', 'INDEX', context=_context)
        if _token == 'INDEX':
            index = self.index(_context)
            return index
        else: # == 'star'
            star = self._scan('star', context=_context)
            return MaxInt()

    def var_expression(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'var_expression', [])
        _token = self._peek("'v'", 'negate', 'float', 'function', 'INDEX', 'INT', context=_context)
        if _token == "'v'":
            variable = self.variable(_context)
            if self._peek('op', 'plus', 'gets', 'div', "','", 'compare', 'rparen', 'star', 'EOL', context=_context) == 'op':
                var_tail = self.var_tail(_context)
        else: # in ['negate', 'float', 'function', 'INDEX', 'INT']
            if self._peek('negate', 'float', 'function', 'INDEX', 'INT', context=_context) == 'negate':
                negate = self._scan('negate', context=_context)
            _token = self._peek('float', 'function', 'INDEX', 'INT', context=_context)
            if _token not in ['float', 'function']:
                int_val = self.int_val(_context)
                if self._peek('div', 'compare', "','", 'gets', 'op', 'plus', 'rparen', 'star', 'EOL', context=_context) == 'div':
                    div = self._scan('div', context=_context)
                    int_val = self.int_val(_context)
            elif _token == 'float':
                float = self._scan('float', context=_context)
            else: # == 'function'
                function = self._scan('function', context=_context)
                var_val = self.var_val(_context)

    def int_val(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'int_val', [])
        _token = self._peek('INDEX', 'INT', context=_context)
        if _token == 'INDEX':
            index = self.index(_context)
            return index
        else: # == 'INT'
            integer = self.integer(_context)
            return integer

    def var_tail(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'var_tail', [])
        op = self._scan('op', context=_context)
        _token = self._peek('float', "'v'", 'INT', context=_context)
        if _token == 'INT':
            integer = self.integer(_context)
        elif _token == 'float':
            float = self._scan('float', context=_context)
        else: # == "'v'"
            variable = self.variable(_context)

    def var_val(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'var_val', [])
        _token = self._peek("'v'", 'float', context=_context)
        if _token == "'v'":
            variable = self.variable(_context)
        else: # == 'float'
            float = self._scan('float', context=_context)

    def int_expression(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'int_expression', [])
        _token = self._peek('negate', 'INDEX', 'mod', "'v'", 'INT', context=_context)
        if _token == 'INDEX':
            is_op = False
            index = self.index(_context)
            if self._peek('op', 'star', 'rparen', 'div', 'EOL', 'gets', "','", 'compare', 'plus', context=_context) in ['op', 'star']:
                iop = self.iop(_context)
                int_val = self.int_val(_context)
                is_op = True
            return operation(iop, index, int_val) if is_op else index
        else: # in ['negate', 'mod', "'v'", 'INT']
            is_negated = False
            if self._peek('negate', 'mod', "'v'", 'INT', context=_context) == 'negate':
                negate = self._scan('negate', context=_context)
                is_negated = True
            int_negatable = self.int_negatable(_context)
            return Negated(int_negatable) if is_negated else int_negatable

    def int_negatable(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'int_negatable', [])
        _token = self._peek('mod', "'v'", 'INT', context=_context)
        if _token == 'INT':
            integer = self.integer(_context)
            return integer
        elif _token == 'mod':
            mod = self._scan('mod', context=_context)
            _token = self._peek("'v'", 'INDEX', context=_context)
            if _token == "'v'":
                variable = self.variable(_context)
            else: # == 'INDEX'
                index = self.index(_context)
        else: # == "'v'"
            variable = self.variable(_context)

    def iop(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'iop', [])
        _token = self._peek('op', 'star', context=_context)
        if _token == 'op':
            op = self._scan('op', context=_context)
            return op
        else: # == 'star'
            star = self._scan('star', context=_context)
            return star

    def jump(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'jump', [])
        goto = self._scan('goto', context=_context)
        _token = self._peek('lparen', 'INDEX', 'INT', context=_context)
        if _token != 'lparen':
            int_val = self.int_val(_context)
        else: # == 'lparen'
            modifier = self.modifier(_context)
        if self._peek("','", 'gets', 'compare', 'div', 'op', 'plus', 'rparen', 'EOL', 'star', context=_context) == "','":
            self._scan("','", context=_context)
            condition = self.condition(_context)

    def condition(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'condition', [])
        if self._peek('negate', "'v'", 'float', 'INDEX', 'INT', context=_context) == 'negate':
            negate = self._scan('negate', context=_context)
        _token = self._peek("'v'", 'float', 'INDEX', 'INT', context=_context)
        if _token not in ['INDEX', 'INT']:
            var_val = self.var_val(_context)
            compare = self._scan('compare', context=_context)
            if self._peek('negate', "'v'", 'float', context=_context) == 'negate':
                negate = self._scan('negate', context=_context)
            var_val = self.var_val(_context)
        else: # in ['INDEX', 'INT']
            int_val = self.int_val(_context)
            compare = self._scan('compare', context=_context)
            if self._peek('negate', 'INDEX', 'INT', context=_context) == 'negate':
                negate = self._scan('negate', context=_context)
            int_val = self.int_val(_context)

    def integer(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'integer', [])
        INT = self._scan('INT', context=_context)
        return Integer(INT)

    def index(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'index', [])
        INDEX = self._scan('INDEX', context=_context)
        return Index(INDEX)


def parse(rule, text):
    P = AutocodeLineParser(AutocodeLineParserScanner(text))
    return runtime.wrap_error_reporter(P, rule)

if __name__ == '__main__':
    from sys import argv, stdin
    if len(argv) >= 2:
        if len(argv) >= 3:
            f = open(argv[2],'r')
        else:
            f = stdin
        print parse(argv[1], f.read())
    else: print >>sys.stderr, 'Args:  <rule> [<filename>]'
# End -- grammar generated by Yapps
